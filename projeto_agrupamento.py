# -*- coding: utf-8 -*-
"""projeto agrupamento

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/179_hairorHTM72pEkm6YewdjEdOaiXLf
"""

# Importando

import numpy as np
from sklearn.cluster import KMeans

filmes_assistidos = np.array([

      [1, 0, 0, 1], # usuario 1: assistiu aos filmes 1 e 4
      [1, 1, 0, 0], # usuario 2: assistiu aos filmes 1 e 2
      [0, 1, 1, 0], # usuario 3: assistiu aos filmes 2 e 3
      [0, 0, 1, 1], # usuario 4: assistiu aos filmes 3 e 4
      [1, 0, 1, 0], # usuario 5: assistiu aos filmes 1 e 4
      [0, 1, 0, 1], # usuario 6: assistiu aos filmes 2 e 4
])

# treinar o modelo
num_clusters = 2

# inicializando o modelo
kmeans = KMeans(n_clusters=num_clusters,random_state=0,n_init=10)

# treinando o modelo
kmeans.fit(filmes_assistidos)

# classificados os usuarios
grupos_indice = kmeans.predict(filmes_assistidos)

# exiir os dados
print("usuario pertencente ao seguinte grupo:")
for i, cluster in enumerate(grupos_indice):
  print(f"usuario {i+1}pertence ao grupo{cluster+1}")


print("\nFilmes assistidos:")
for i in range(len(filmes_assistidos)):
  assistidos = np.where(filmes_assistidos[i] == 1)[0] + 1
  print(f"usuario {i+1} assistio aos filmes: {assistidos}")

# fução que recomenda filmes
def recomendar_filmes(filmes, filmes_assitidos, grupos_indice):
  filmes = np.array(filmes)

  # encontrar o grupo do usuario
  usuario_id = len(filmes_assistidos)
  grupo_usuario = kmeans.predict([filmes])[0]

  #encontrar todos os usuarios no msm grupo
  usuario_no_mesmo_grupo = [i for i in range(len(grupos_indice))
  if grupos_indice[i] == grupo_usuario]

  # filmes assistidos pelos usuarios dos outros grupos
  filmes_recomendados = set()
  for usuario in usuario_no_mesmo_grupo:
    filmes_assistidos_usuario = np.where(filmes-assistidos[usuario] == 1)[0]
    filmes_recomendados.update(filmes_assistidos_usuario)

  # remover filmes
  filmes_recomendados = filmes_recomendados - set(np.where(filmes == 1)[0])

  # ajustar os indices dos trabalhos
  filmes_recomendados = [filme + 1 for filme in filmes_recomendados]

  return sorted(filmes_recomendados)

# exemplo de uso da fução recomendar_filmes
filmes_assistidos_usuario = [1, 0, 1, 0] # vetor de filmes
#assistidos (por exemplo, assistiu aos filmes 1 e 3)
filmes_recomendados = recomendar_filmes(filmes_assistidos_usuario,
                                        filmes_assistidos, grupos_indice)

print(f"\nFilmes recomendados: {filmes_recomendados}")